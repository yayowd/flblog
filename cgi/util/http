#!/usr/bin/env bash

# This file is part of the flblog project.
# flblog is a simple blog site system.
# Copyright (C) 2020  The flblog Authors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# http functions
# NOTE: all of functions must called in main shell,
#       and the result is $RET.
#       because error check in function,
#       and terminate response directly when error ocurse.

# --make sure only source once
if [ $CGI_flblog_HTTP ]; then
    return
fi
CGI_flblog_HTTP=true

# --make response
#   $RESCODE+$RESHEAD+$RESBODY is all response buffer for one rquest
RESCODE=''
RESHEAD=''
RESBODY=''
# trap exit event to send response buffer
function onExit() {
    # clear the request post body first
    cat >/dev/null

    # ouput response buffer
    echo "$RESCODE"
    echo "$RESHEAD"
    echo -n "$RESBODY"
}
trap onExit EXIT
# set response code -- for original http protocol
#   $1  code
#   $2  descript
function resCode0() {
    printf -v RESCODE 'HTTP/1.1 %s %s' "$1" "$2"
    RESHEAD=''
    RESBODY=''
}
# set response code -- for nginx
#   $1  code
#   $2  descript
function resCode() {
    printf -v RESCODE 'Status: %s %s' "$1" "$2"
    RESHEAD=''
    RESBODY=''
}
# set response header
#   $1  name
#   $2  value
function resHead() {
    printf -v RESHEAD '%s%s: %s\n' "$RESHEAD" "$1" "$2"
}
# append reponse body
#   $1  text to append to reponse body
function resBody() {
    RESBODY=$RESBODY$1
}
# reponse 200
function res200() {
    resCode 200 'OK'
    resHead 'Content-Type' 'text/html; charset=UTF-8'
}
# response 301
#   $1  relocation url
function res301() {
    resCode 301 'Moved Permanently'
    resHead 'Location' "$1"
    exit 0
}
# response 303
#   $1  relocation url
# NOTE: Used to redirect after a PUT or a POST, 
#       so that refreshing the result page doesn't re-trigger the operation.
function res303() {
    resCode 303 'See Other'
    resHead 'Location' "$1"
    exit 0
}
# response 401 -- no use
#   $1  status
#   $2  html message
function res401() {
    resCode 401 'Unauthorized'
    resHead 'WWW-Authenticate' "Basic realm=\"$1\""
    resBody "$2"
    exit 0
}
# response a html template file
# support var expand
#   $1  file path
function resFile() {
    if [ -z "$1" ]; then
        resErr 'File path is empty when response a html template file.'
    fi

    # More difficult here
    # NOTE: 1.enclose sed parameter in single quotes to avoid bash string escaping
    #       2.the sed regular expression escaping
    #       3.it is very important to enclose the sed return value in double quotes
    #         It can avoid irregular individual garbled characters in multibyte strings
    # TRANSLATE:
    #       \(not before $) -> \\       escaping to avoid misuse
    #       \$              -> \$       keeping to echo '$'
    #        "              -> \"       escaping to avoid misuse
    #        `              -> \`       escaping to avoid misuse
    html="$(sed 's/\(\\\)\([^$]\)/\1\1\2/g; s/"/\\"/g; s/`/\\`/g' "$1")"
    # NOTE: 1.Escaping the eval command for the first time: the second parameter is expanded
    #           variable 'html' to be expanded
    #       2.Escaping the resBody command for the second time: the first expanded parameter will be expanded again
    #           variables in 'html' content to be expanded
    eval resBody "\"$html\""
}
# response error and terminate
#   $ERRCLOSE == true render close button on error screen
#   $ERRCLOSE == false render back button on error screen
function resErr() {
    htmlEncode "$*" && html=$RET

    if [ "$ERRCLOSE" = true ]; then
        errBtn="<a href='#' onclick='window.close()'>CLOSE</a>"
    else
        errBtn="<a href='#' onclick='history.back()'>BACK</a>"
    fi

    # set error msg as reponse body
    RESBODY="<div style='width=100%; height=100%; text-align: center;'> \
                <h4>ERROR</h4> \
                <p>$html</p> \
                <p>$errBtn</p> \
             </div>"

    # terminate response
    exit 1
}
# response 200 OK by default
res200

# --html encoding
function htmlEncode() {
    RET=$*
    RET=${RET//\&/\&amp;}
    RET=${RET//</\&lt;}
    RET=${RET//>/\&gt;}
    RET=${RET//\"/\&quot;}
    RET=${RET//\'/\&#39;}

    # # NOTE: the follow HERE String(<<<) will make irregular individual garbled characters in multibyte strings
    # RET="$(sed "s/\&/\&amp;/g; \
    #             s/</\&lt;/g; \
    #             s/>/\&gt;/g; \
    #             s/\"/\&quot;/g; \
    #             s/'/\&#39;/g" <<<"$*")"
}

# --drop danger tags in html code
function htmlSafe() {
    shopt -s nocasematch
    RET=$*
    RET=${RET//<a/<div}
    RET=${RET//<script/<div}
    RET=${RET//<\/a>/<\/div>}
    RET=${RET//<\/script>/<\/div>}

    # # NOTE: the follow HERE String(<<<) will make irregular individual garbled characters in multibyte strings
    # RET="$(sed "s/<a/<div/Ig; \
    #             s/<\/a>/<\/div>/Ig; \
    #             s/<script/<div/Ig; \
    #             s/<\/script>/<\/div>/Ig" <<<"$*")"
}
