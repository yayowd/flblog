#!/usr/bin/env bash

# This file is part of the flblog project.
# flblog is a simple blog site system.
# Copyright (C) 2020  The flblog Authors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# home functions
# NOTE: all of functions must called in main shell,
#       and the result is $RET.
#       because error check in function,
#       and terminate response directly when error ocurse.

# --make sure only source once
if [ $CGI_flblog_HOME ]; then
    return
fi
CGI_flblog_HOME=true

# --includes
. "$(dirname "${BASH_SOURCE[0]}")/http"
. "$(dirname "${BASH_SOURCE[0]}")/fcgi"
. "$(dirname "${BASH_SOURCE[0]}")/data"
. "$(dirname "${BASH_SOURCE[0]}")/common"

# --get home file
#   result is home file path
function homeFile() {
    curFile "$blogsdir/index.html" "$templdir/home.html"
}

# --get home config
#   multiple return values
function getConfig() {
    homeFile && file=$RET
    # get first line number for config
    ln="$(sed -n "/^<div class='header'>/=" "$file")"
    if [ -n "$ln" ]; then
        {
            IFS= read -r title
            IFS= read -r sn
            readData "$file" "$sn" && memo=$RET
        } <<<"$(sed -n "$ln{ \
                        n; s/^<h3>\(.*\)<\/h3>/\1/p; \
                        n; =; \
                    }" "$file")"
    fi
}

# --save home config
#   $1      title
#   $2      memo
function saveConfig() {
    if [ -z "$1" ]; then
        resErr 'No title to save home config.'
    fi
    htmlEncode "$1" && title=$RET
    htmlEncode "$2" && memo=$RET
    IFS= read -r -d '' config <<EOF
<div class='header'>
<h3>$title</h3>
<pre>
$memo</pre>
</div>
EOF
    homeFile && file=$RET
    # get first line number for config
    ln="$(sed -n "/^<div class='header'>/=" "$file")"
    if [ -z "$ln" ]; then
        save "$file" "<!--config-->" "" "$config"
    else
        remove "$file" "<div class='header'>" "<\/div>" && ln=$((RET - 1))
        save "$file" "" "$ln" "$config"
    fi
}

# --get ads content
#   $1      ad tag: l / r
#   multiple return values
function getAD() {
    homeFile && file=$RET
    # get first line number for ad by tag
    ln="$(sed -n "/^<div class='ads$1'/=" "$file")"
    if [ -n "$ln" ]; then
        ln=$((ln + 1))
        url="$(sed -n "$ln{s/^<a.*href='\(.*\)'>/\1/p}" "$file")"
        readData "$file" "$ln" "a" && html=$RET
        eval ads$1_url='$url'
        eval ads$1_html='$html'
    fi
}

# --save ads content
#   $1      ad tag: l / r
#   $2      url
#      is empty     remove
#      not empty    save
#   $3      html
#   NOTE: encode url and rename danger html tag: a, script
function saveAD() {
    homeFile && file=$RET
    if [ -z "$2" ]; then
        remove "$file" "<div class='ads$1'" "<\/div>" true
    else
        if [ -z "$1" ]; then
            resErr 'No html to save ads content.'
        fi
        htmlEncode "$2" && url=$RET
        htmlSafe "$3" && html=$RET
        IFS= read -r -d '' ad <<EOF
<div class='ads$1'>
<a target='blank_' href='$url'>
$html</a>
</div>
EOF
        # get first line number for ad
        ln="$(sed -n "/^<div class='ads$1'/=" "$file")"
        if [ -z "$ln" ]; then
            save "$file" "<!--ads$1-->" "" "$ad"
        else
            remove "$file" "<div class='ads$1'" "<\/div>" && ln=$((RET - 1))
            save "$file" "" "$ln" "$ad"
        fi
    fi
}

# --get home detail text
#   multiple return values
function getDetail() {
    homeFile && file=$RET
    # get first line number for detail
    ln="$(sed -n "/^<div class='detail'>/=" "$file")"
    if [ -n "$ln" ]; then
        readData "$file" $((ln + 1)) && detail=$RET
    fi
}

# --save detail text to home page
#   $1      detail
function saveDetail() {
    if [ -z "$1" ]; then
        resErr 'No detail to save to home page.'
    fi
    htmlEncode "$1" && detail=$RET
    IFS= read -r -d '' data <<EOF
<div class='detail'>
<pre>
$detail</pre>
</div>
EOF
    homeFile && file=$RET
    # get first line number for detail
    ln="$(sed -n "/^<div class='detail'>/=" "$file")"
    if [ -z "$ln" ]; then
        save "$file" "<!--details-->" "" "$data"
    else
        remove "$file" "<div class='detail'>" "<\/div>" && ln=$((RET - 1))
        save "$file" "" "$ln" "$data"
    fi
}

# --save user
#   $1      name
#   $2      password
#   $3      memo
function saveUser() {
    if [ -z "$1" ]; then
        resErr 'No name to save user.'
    fi
    if [ -z "$2" ]; then
        resErr 'No password to save user.'
    fi
    # save user to passwd file
    htpasswd -b "$managePasswd" "$1" "$2" 2>/dev/null
    # add additional user info
    sdate="$(date "+%Y%m%d%H%M%S")"
    sed -i "/^$1/s/\$/:$sdate:$user:${3//:}/" "$managePasswd"
    # add user to home page
    addUser2Home "$1" "$3"
}

# --add user to home page
#   $1      name
#   $2      memo
function addUser2Home () {
    IFS= read -r -d '' user <<EOF
<a class='user' href='/$1'>
<span class='title'></span>
<span class='info'>$1 $(date "+%H:%M:%S %m/%d/%Y")</span>
</a>
EOF
    homeFile && file=$RET
    ln=$(sed -n "/^<a class='user' href='\/$1'/{=; q}" "$file")
    if [ -z "$ln" ]; then
        save "$file" "<!--users-->" "" "$user"
    else
        remove "$file" "<a class='user' href='\/$1'" "<\/a>" && ln=$((RET - 1))
        save "$file" "" "$ln" "$user"
    fi
}
