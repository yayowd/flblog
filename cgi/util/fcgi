#!/usr/bin/env bash

# This file is part of the flblog project.
# flblog is a simple blog site system.
# Copyright (C) 2020  The flblog Authors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# cgi functions
# NOTE: all of functions must called in main shell,
#       and the result is $RET.
#       because error check in function,
#       and terminate response directly when error ocurse.

# --fastcgi params list
#
# fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
# fastcgi_param  QUERY_STRING       $query_string;
# fastcgi_param  REQUEST_METHOD     $request_method;
# fastcgi_param  CONTENT_TYPE       $content_type;
# fastcgi_param  CONTENT_LENGTH     $content_length;
#
# fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
# fastcgi_param  REQUEST_URI        $request_uri;
# fastcgi_param  DOCUMENT_URI       $document_uri;
# fastcgi_param  DOCUMENT_ROOT      $document_root;
# fastcgi_param  SERVER_PROTOCOL    $server_protocol;
# fastcgi_param  REQUEST_SCHEME     $scheme;
# fastcgi_param  HTTPS              $https if_not_empty;
#
# fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
# fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;
#
# fastcgi_param  REMOTE_ADDR        $remote_addr;
# fastcgi_param  REMOTE_PORT        $remote_port;
# fastcgi_param  SERVER_ADDR        $server_addr;
# fastcgi_param  SERVER_PORT        $server_port;
# fastcgi_param  SERVER_NAME        $server_name;
#
# fastcgi_param REMOTE_USER         $remote_user;
# fastcgi_param PATH_INFO           $1;

# --make sure only source once
if [ $CGI_flblog_FCGI ]; then
    return
fi
CGI_flblog_FCGI=true

# --includes
. "$(dirname "${BASH_SOURCE[0]}")/http"

# --pasrse request params
#   need bash v4.0+
declare -A uparam

# --decode query param value
function urldecode() {
    : "${*//+/ }"
    RET="$(echo -e "${_//%/\\x}")"
}
# --parse query string params
#   no result, just fill $uparam
function parseQuery() {
    while
        IFS='=' read -r -d '&' key value
        [ -n "$key" ]
    do
        urldecode "$value" && uparam["$key"]=$RET
    done
}
parseQuery <<<"$QUERY_STRING"

# --pasrse post body params
#   no result, just fill $uparam
function readBody() {
    IFS=' ;=' read -r type _ boundary <<<"$CONTENT_TYPE"
    if [ "$type" = 'application/x-www-form-urlencoded' ]; then
        parseQuery
    elif [ "$type" = 'multipart/form-data' ]; then
        while IFS=$'\n' read -r -d $'\r' line; do
            # --test
            # echo -n "--------->line=$line" >&2
            # hexdump >&2 <<<"$line"
            if [[ "$line" =~ ^--$boundary ]]; then
                # parse next tow lines
                IFS=' :;=' read -r -d $'\r' _ disposition _ name _ filename || break # stop when no more lines
                IFS=' :' read -r -d $'\r' _ ctype                                    # may be a blank line or content type line
                # format names: delete special characters
                name=${name//[:\/\"\'\\]/}
                filename=${filename//[:\/\"\'\\]/}
                # check attr file type
                if [[ -n "$ctype" ]]; then
                    if [[ -n "$filename" && ! "$ctype" =~ ^text/ ]]; then
                        resErr "attr file text only, current: [$ctype] [$filename]"
                    fi
                    read -r -d $'\r' _ # skip blank line when have content type line
                fi
                # set param value from next line
                IFS=$'\n' read -r -d $'\r' uparam[$name]
            else
                # append multi-lines value
                uparam[$name]=${uparam[$name]}$'\n'$line
            fi
        done
    fi
}
readBody
# --test
# echo -n "--------->uparam names=${!uparam[*]}" >&2

# --test
#parseQuery "client=firefox-b-d&ei=sT7fX5CPAYfahwPWsJko&q=bash+%E5%B0%86%E5%8F%98%E9%87%8F%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6&oq=bash+%E5%B0%86%E5%8F%98%E9%87%8F%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6&gs_lcp=CgZwc3ktYWIQA1D152pYrLhrYPa5a2gAcAB4AIABtjyIAd9ekgENMy0xLjEuMC4xLjktMpgBAKABAaoBB2d3cy13aXrAAQE&sclient=psy-ab&ved=0ahUKEwjQq-KSw9ztAhUH7WEKHVZYBgUQ4dUDCAw&uact=5"
#
#cat <<EOF
#<div style='background-color: #71f5f5; border: #999 solid 1px; padding: 5px;'>
#<p>query_string: $QUERY_STRING</p>
#<p>uparam names: ${!uparam[*]}</p>
#<p>content_type: $CONTENT_TYPE</p>
#<p>content_length: $CONTENT_LENGTH</p>
#<p>body: $body</p>
#<p>type: $type</p>
#<p>boundary: $boundary</p>
#<p>post body: <br/>
#<pre>$REQUEST_BODY</pre>
#</p>
#</div>
#EOF
