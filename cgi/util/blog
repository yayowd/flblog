#!/usr/bin/env bash

# This file is part of the flblog project.
# flblog is a simple blog site system.
# Copyright (C) 2020  The flblog Authors.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# blog functions
# NOTE: all of functions must called in main shell,
#       and the result is $RET.
#       because error check in function,
#       and terminate response directly when error ocurse.

# --make sure only source once
if [ $CGI_flblog_BLOG ]; then
    return
fi
CGI_flblog_BLOG=true

# --includes
. "$(dirname "${BASH_SOURCE[0]}")/http"
. "$(dirname "${BASH_SOURCE[0]}")/fcgi"
. "$(dirname "${BASH_SOURCE[0]}")/data"
. "$(dirname "${BASH_SOURCE[0]}")/common"
. "$(dirname "${BASH_SOURCE[0]}")/home"

# --get current user's draft file
#   result is draft file path
function draftFile() {
    curFile "$blogsdir/${user}_draft.html" "$templdir/draft.html"
}

# --get current user's blog file
#   result is blog file path
function blogFile() {
    curFile "$blogsdir/${user}.html" "$templdir/blog.html"
}

# --create a new blog node for draft file
#   the title and content will be auto encode
#   $1      id
#   $2      title
#   $3      content
#   $4      create time(tc) for remake blog
function mkBlog() {
    if [ -z "$1" ]; then
        resErr 'No id to make blog.'
    fi
    if [ -z "$2" ]; then
        resErr 'No title to make blog.'
    fi
    if [ -z "$3" ]; then
        resErr 'No content to make blog.'
    fi
    ndate="$(date +%s)"
    sdate="$(date "+%H:%M:%S %m/%d/%Y")"
    htmlEncode "$2" && title=$RET
    htmlEncode "$3" && content=$RET
    IFS= read -r -d '' RET <<EOF
<li id='$1' tc='${4:-$ndate}' tu='$ndate'>
<p>$title</p>
<p>$user $sdate</p>
<pre>
$content</pre>
<ul>
<!--new-reply-->
</ul>
</li>
EOF
    return 0 # this statement must be included to ensure filling of the return value $RET
}

# --remove blog in draft
#   $1      blog id
#   $RET is blog first line number
function rmBlog() {
    if [ -z "$1" ]; then
        resErr 'No id to remove blog.'
    fi
    # remove blog in draft file
    draftFile && file=$RET
    remove "$file" "<li id='$1'" "<\/li>"
}

# --save blog to draft
#   $1      id
#     is  empty   save as new blog
#     not empty   edit blog by id
#   $2      title
#   $3      content
#   $RET is blog id
function draftSave() {
    # save blog to draft file
    draftFile && file=$RET
    # new blog
    if [ -z "$1" ]; then
        # get id for new blog
        nextId && id=$RET
        # make blog html node
        mkBlog "$id" "$2" "$3" && blog=$RET
        # insert new blog text into draft file
        if save "$file" "<!--new-draft-->" "" "$blog"; then
            RET=$id
            return 0
        else
            return 1
        fi
    else # edit blog
        # get first line number and tc by blog id
        {
            IFS=$'\n' read -r -d '' ln tc
        } <<<"$(sed -n "/^<li id='$1'/{=; s/.*tc='\([0-9]*\)'.*/\1/p}" "$file")"
        if [ -z "$ln" ]; then
            resErr "Not found id($1) in file($file) to edit."
        fi
        # remake blog html node
        mkBlog "$1" "$2" "$3" "$tc" && blog=$RET
        # remove old blog
        rmBlog "$1" && ln=$((RET - 1))
        # insert new blog at the original location
        if save "$file" "" "$ln" "$blog"; then
            RET=$1
            return 0
        else
            return 1
        fi
    fi
}

# --publish draft to blog
#   $1      id
#   $2      title
#   $3      content
function draftPublish() {
    # get tc by blog id in draft file
    draftFile && file=$RET
    tc="$(sed -n "/^<li id='$1'/s/.*tc='\([0-9]*\)'.*/\1/p" "$file")"
    # remake blog html node
    mkBlog "$1" "$2" "$3" "$tc" && blog=$RET
    # save to blog file
    blogFile && file=$RET
    save "$file" "<!--new-blog-->" "" "$blog"
    # remove in draft
    rmBlog "$1"
    # add publish to home page
    addPublish2Home "$1" "$2"
}

# --add publish to home page
#   $1      id
#   $2      title
function addPublish2Home() {
    IFS= read -r -d '' publish <<EOF
<a class='blog' href='/$user#$1'>
<span>$2</span><span class='separator'></span><span class='date'>$(date "+%Y-%m-%d")</span>
</a>
EOF
    homeFile && file=$RET
    sed -i "/^<!--list-->$/r"<(echo -n "$publish") "$file"
}

# --get blog list
#   $1      which file: draft or blog
function getList() {
    if [ -z "$1" ]; then
        resErr 'No file path to get blog list.'
    fi
    RET="$(sed -n "/^<li id='/{ \
                  s/^<li id='\(.*\)' tc='\([0-9]*\)' tu='\([0-9]*\)'.*/\1 \2 \3/p; \
               n; s/^<p>\(.*\)<\/p>/\1/p; \
               n; s/^<p>\(.*\)<\/p>/\1/p \
            }" "$1")"
}

# --make html for draft list
function draftList() {
    draftFile && file=$RET
    getList "$file" && list=$RET
    RET=''
    while
        IFS=' ' read -r id tc tu
        [ -n "$id" ]
    do
        IFS= read -r title
        IFS=' ' read -r user time date
        IFS= read -r -d '' line <<EOF
<li>
<span>$date $time</span>
<a href='#' onclick='window.open("edit?id=$id")'>$title</a>
</li>
EOF
        RET=$RET$line
    done <<<"$list"
}

# --get blog content
#   $1      which file: draft or blog
#   $2      blog id
function getContent() {
    if [ -z "$1" ]; then
        resErr 'No file path to get blog content.'
    fi
    if [ -z "$2" ]; then
        resErr 'No id to get blog content.'
    fi
    # get first line number by blog id
    ln="$(sed -n "/^<li id='$2'/=" "$1")"
    if [ -z "$ln" ]; then
        resErr "Not found id($2) in file($1) to get blog content."
    fi
    RET="$(sed -n "$ln{ \
                   s/^<li id='\(.*\)' tc='\([0-9]*\)' tu='\([0-9]*\)'.*/\1 \2 \3/p; \
                n; s/^<p>\(.*\)<\/p>/\1/p; \
                n; s/^<p>\(.*\)<\/p>/\1/p; \
                n; =;\
            }" "$1")"
}

# --get blog content for edit in draft
#   $1      blog id
#   multiple return values
function draftContent() {
    draftFile && file=$RET
    getContent "$file" "$1" && blog=$RET
    if
        IFS=' ' read -r id tc tu
        [ -n "$id" ]
    then
        IFS= read -r title
        IFS=' ' read -r user time date
        IFS= read -r sn
        readData "$file" "$sn" && content=$RET
    fi <<<"$blog"
}

# --get blog config
#   multiple return values
function getConfig() {
    blogFile && file=$RET
    # get first line number for config
    ln="$(sed -n "/^<div class='header'>/=" "$file")"
    if [ -n "$ln" ]; then
        {
            IFS= read -r title
            IFS= read -r sn
            readData "$file" "$sn" && memo=$RET
        } <<<"$(sed -n "$ln{ \
                        n; s/^<h3>\(.*\)<\/h3>/\1/p; \
                        n; =;\
                    }" "$file")"
    fi
}

# --save blog config
#   $1      title
#   $2      memo
function saveConfig() {
    htmlEncode "$1" && title=$RET
    htmlEncode "$2" && memo=$RET
    IFS= read -r -d '' config <<EOF
<div class='header'>
<h3>$title</h3>
<pre>
$memo</pre>
</div>
EOF
    blogFile && file=$RET
    # get first line number for config
    ln="$(sed -n "/^<div class='header'>/=" "$file")"
    if [ -z "$ln" ]; then
        save "$file" "<!--config-blog-->" "" "$config"
    else
        remove "$file" "<div class='header'>" "<\/div>" && ln=$((RET - 1))
        save "$file" "" "$ln" "$config"
    fi
    # add config to home page
    addConfig2Home "$1"
}

# --add config to home page
#   $1      title
function addConfig2Home() {
    IFS= read -r -d '' config <<EOF
<span class='title'>$1</span>
EOF
    homeFile && file=$RET
    ln=$(sed -n "/^<a class='user' href='\/$user'/{=; q}" "$file")
    if [ -n "$ln" ]; then
        sed -i "$((ln + 1))c$config" "$file"
    else
        resErr "User($user) not add to home page, Please contact administrator to register user again."
    fi
}
